'''A script to run a bunch of asp performance tests on lflood via
catalyst.
'''

import datetime
import pathlib
import random
import subprocess
import sys

import yaml


ior_logs_dir = pathlib.Path(
    '/g/g0/defazio1/non-jira-projects/jbod-zfs-asp-tests/ior_logs'
)
mdtest_logs_dir = pathlib.Path(
    '/g/g0/defazio1/non-jira-projects/jbod-zfs-asp-tests/mdtest_logs'
)
scripts_dir = pathlib.Path(
    '/g/g0/defazio1/non-jira-projects/jbod-zfs-asp-tests/srun_commands'
)
stonewall_status = pathlib.Path(
    '/g/g0/defazio1/non-jira-projects/jbod-zfs-asp-tests/stonewall_status'
)




mdtest_path = pathlib.Path('/g/g0/defazio1/repos/ior/src/mdtest')

ior_path = pathlib.Path('/g/g0/defazio1/repos/ior/src/ior')

def make_mdtest_command(timestamp):
    command = [
        str(mdtest_path),
        '-v', # verbose
        # TODO should be -n 1000000
        '-n', '100', # number of files per process
        '-u',
        '-L',
        '-F',
        '-P',
        '-N', '1',
        '-d', '/p/lflood/defazio1/io500-all/mdtest-easy-cleanup',
        #'-x', '/g/g0/defazio1/mdtest_results/mdtest-easy-cleanup.stonewall',
        '-x', str(stonewall_status),
        '-Y',
        '-W', '300',
        '-a', 'POSIX',
    ]
    #command += optional_flags
    # format command into a string with each arugument in single quotes
    command = ['\'' + x + '\'' for x in command]
    command = ' '.join(command)
    return command

def make_ior_command(timestamp):
    command = [
        str(ior_path),
        '-C',
        '-Q', '1',
        '-g',
        '-G', '271',
        '-k',
        '-e',
        '-o', '/p/lflood/harr1/io500-all/$(date +"%Y.%m.%d-%H.%M.%S")/ior-easy/ior_file_easy',
        '-O', 'stoneWallingStatusFile=./results/$(date +"%Y.%m.%d-%H.%M.%S")/ior-easy.stonewall',
        '-t', '2m'
        '-b', '9920000m'
        '-F',
        '-w',
        '-D', '300'
        '-O', 'stoneWallingWearOut=1',
        '-a', 'POSIX',
    ]

def make_srun_command(test_command_path): # , nodes_and_procs):
    #num_nodes, num_procs = get_nodes_and_procs()
    # pgarter is specifically for catalyst
    #num_nodes, num_procs = nodes_and_procs
    num_nodes, num_procs = 4,4
    cmd = [
        'srun',
        '-p', 'pgarter',
        f'-N{num_nodes}',
        f'-n{num_procs}',
        '-l',
        str(test_command_path)
    ]
    return cmd


def single_srun(jbod_zfs_params=None):
    '''Create a file with a ior or mdtest command, then run it.
    '''
    if jbod_zfs_params is None:
        jbod_zfs_params = ''

    #optional_flags = get_optional_flags(all_optional_flags)
    timestamp = str(datetime.datetime.now()).replace(' ', '_').replace(':', '')
    mdtest_command = make_mdtest_command(
        timestamp,
        #optional_flags=optional_flags
    )
    mdtest_script_path = scripts_dir / timestamp
    with open(mdtest_script_path, 'w') as f:
        f.write('#!/bin/bash\n')
        f.write('# autogenerated by catalyst_lflood_test.py\n')
        f.write(mdtest_command)
        f.write('\n')
        f.write('# ' + str(jbod_zfs_params) + '\n')
    mdtest_script_path.chmod(0o755)
    srun_command = make_srun_command(mdtest_script_path)
    output_logs_path = mdtest_logs_dir / timestamp
    run_data = {
        'mdtest_command': mdtest_command,
        'srun_command': srun_command,
        'output_logs_path': output_logs_path,
    }
    print(run_data)
    print()
    srun_output = subprocess.run(
        srun_command,
        check=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
    ).stdout.decode()
    with open(output_logs_path, 'w+') as f:
        f.write(srun_output)

# /g/g0/defazio1/ior/src/mdtest '-v' '-n' '1000000' '-u' '-L' '-F' '-P' '-N' '1' '-d' '/p/lflood/defazio1/io500-all/mdtest-easy-cleanup' '-x' '/g/g0/defazio1/mdtest_results/mdtest-easy-cleanup.stonewall' '-Y' '-W' '300' '-a' 'POSIX'

if __name__ == '__main__':
    if len(sys.argv) > 1:
        runs = int(sys.argv[1])
    else:
        runs = 3
    for _ in range(runs):
        single_srun()
