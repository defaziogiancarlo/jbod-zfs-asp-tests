'''A script to randomize running mdtest on garter to
try to reproduce a bug.
This needs to be run from and Opal node.
Also, you need to mount lflood on opal for this to work.
'''

import datetime
import pathlib
import random
import subprocess
import sys

import yaml

output_logs_dir = pathlib.Path('/g/g0/defazio1/jira/TOSS/5213/garter_mdtest/output_logs')
scripts_dir = pathlib.Path('/g/g0/defazio1/jira/TOSS/5213/garter_mdtest/scripts')

# these flags are optional and can be applied randomly
all_optional_flags = [
    '-L',
    '-F',
    '-Y',
]

# TODO this gives a strange distribution
# maybe give each flag some probability of being in the set
def get_optional_flags(flags):
    '''Get a random subset of the optional flags.'''
    k = random.randint(0, len(flags))
    return random.sample(flags, k)

def get_nodes_and_procs():
    '''Determine the number of nodes and total
    number of processes to be used for srun.
    '''
    num_nodes = random.randint(4,16)
    procs_per_node = random.randint(2,8)
    procs = num_nodes * procs_per_node
    return num_nodes, procs


def make_mdtest_command(timestamp, optional_flags=None):
    if optional_flags is None:
        optional_flags = []
    #optional_flags = ['L', 'F', 'Y']
    command = [
        '/g/g0/defazio1/ior/src/mdtest',
        '-v', # verbose
        # TODO should be -n 1000000
        '-n', '1000000', # number of files per process
        '-u',
        '-L',
        '-F',
        '-P',
        '-N', '1',
        '-d', '/p/lflood/defazio1/io500-all/mdtest-easy-cleanup',
        '-x', '/g/g0/defazio1/mdtest_results/mdtest-easy-cleanup.stonewall',
        '-Y',
        '-W', '300',
        '-a', 'POSIX',
    ]
    #command += optional_flags
    # format command into a string with each arugument in single quotes
    command = ['\'' + x + '\'' for x in command]
    command = ' '.join(command)
    return command

def make_srun_command(mdtest_command_path):
    num_nodes, num_procs = get_nodes_and_procs()
    # added for catalyst
    # exclusions = '--exclude=catalyst[1-203,236-304]'
    cmd = ['srun', '-p', 'pgarter', f'-N{num_nodes}', f'-n{num_procs}', '-l', str(mdtest_command_path)]
    return cmd


def single_srun():
    optional_flags = get_optional_flags(all_optional_flags)
    timestamp = str(datetime.datetime.now()).replace(' ', '_').replace(':', '')
    mdtest_command = make_mdtest_command(
        timestamp,
        optional_flags=optional_flags
    )
    mdtest_script_path = scripts_dir / timestamp
    with open(mdtest_script_path, 'w') as f:
        f.write('#!/bin/bash\n')
        f.write('# autogenerated by randomize_mdtest_garter.py\n')
        f.write(mdtest_command)
        f.write('\n')
    mdtest_script_path.chmod(0o755)
    srun_command = make_srun_command(mdtest_script_path)
    output_logs_path = output_logs_dir / timestamp
    run_data = {
        'mdtest_command': mdtest_command,
        'srun_command': srun_command,
        'output_logs_path': output_logs_path,
    }
    print(run_data)
    print()
    srun_output = subprocess.run(
        srun_command,
        check=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
    ).stdout.decode()
    with open(output_logs_path, 'w+') as f:
        f.write(srun_output)

# /g/g0/defazio1/ior/src/mdtest '-v' '-n' '1000000' '-u' '-L' '-F' '-P' '-N' '1' '-d' '/p/lflood/defazio1/io500-all/mdtest-easy-cleanup' '-x' '/g/g0/defazio1/mdtest_results/mdtest-easy-cleanup.stonewall' '-Y' '-W' '300' '-a' 'POSIX'

if __name__ == '__main__':
    if len(sys.argv) > 1:
        runs = int(sys.argv[1])
    else:
        runs = 3
    for _ in range(runs):
        single_srun()
